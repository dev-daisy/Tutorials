The Runnable interface in Java
Selecting transcript lines in this section will navigate to timestamp in the video
- A second way to handle threads in Java is the runnable interface. in this example, I have a class called runnable example, which implements runnable. One of the benefits of impelmenting a runnable interface, instead of extending the thread class, is that if my class extends the thread class, than I can't extend any other classes. In Java, you are only allowed to extend one class. But because my class implements runnable, it can extend other classes if I want it to. I have then overridden the run method and in here I have put all the codes that I want to run when I create a thread using my runnable. In this example, I have used a while loop to print out every number from 1 to 100, and after each number it prints the name of the current thread. I also have a main class with a main method in it. In order to use my runnable example class, the first thing I need to do is create a variable of type thread. I will call it thread1 and assign it to a new thread. There is a constructor of the thread class, which takes a runnable as an argument, so I can pass in a new instance of my runnable example class. Now just as I normally would, I call the start method by writing thread1.start if I run this the output shows me that the code inside my run method is being called it has printed every number from 1 to 100 with the name of the thread. It is not actually necessary for me to create a separate class to implement the runnable interface, especially as my implementation is so short and only has one method in it, the run method. Instead, I could create a second thread inside my main method. Which I will call thread2 and then when I create my new thread I can create a new instance of runnable which I will parson as an argument to the thread constructor. The Netbeans ID auto-completes the rest for me creating a run method. Just as previously, I can put any code I want my thread to execute inside here. I will copy and paste the forleap in my runnable example class. And I will paste it in my new run method in the main class replacing Netbean's auto-generated code. I will then call thread2.start to start my second thread. I can actually make the code even shorten than this when I hover my mouse over runnable, Netbeans tells me that this anonymous inter class creation can be turned into a lambda expression. Because runnable is a functional interface which means that it defines only one abstract method, I can replace this code with a labmda. The Netbeans ID will automatically do this for me. Now when I run my code I can see that both threads do the same thing and print out 1 to 100. Because they are running at the same time the results and the output are mixed together.