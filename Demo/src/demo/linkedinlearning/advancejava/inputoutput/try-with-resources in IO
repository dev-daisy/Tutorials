Using try-with-resources with I/O
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] When using input and output resources, it is important to use try with resources whenever you can. Using try with resources makes sure that all resources are closed for me. I don't have to worry about manually closing all resources which can be difficult. If resources aren't closed properly, it is easy to end up with code-leaking resources. This is especially true if you are using multiple resources that interact with each other. In this example, I have a class called TryWithResourcesExample. Inside the main method, I have a buffered reader wrapped around a string reader, which just takes a simple string containing Hello World. I then have a simple string writer called writer. Next, I call writer.write, and inside that method, I call reader.readLine so I am using a reader to read a string and then I'm writing it to a writer. Finally, I print out the result. When I run the program, I get the simple Hello World message printed to the console. I have wrapped all of my code in the main method inside a try block, But I can improve this by using try with resources. First, I need to put a pair of brackets after the word try. Inside the brackets, I can put anything that counts as a resource. Objects that implement the auto-closable interface are resources. Buffered reader and string writer both implement auto-closable, so I can put both of them in there. I simply have to cut them and paste them inside the brackets. So first, I will cut the buffered reader, and I will paste it inside the brackets. And next, I will cut the string writer and paste that inside the brackets, too. Now, if I rerun my program, it works just the same. Now, I don't have to worry at all about resource leaks, as this is all handled for me. If you're not sure if you should use try with resources, there is a simple test. If you can use try with resources, then you should uses try with resources. It is a simple, easy, and effective way of preventing resource leaks.