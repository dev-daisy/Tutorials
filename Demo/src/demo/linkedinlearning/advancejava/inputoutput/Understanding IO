Understanding I/O in Java
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Streams are a way of reading data or writing data. There are lots of different use cases for using streams and they are used more often than you might think. Even a simple Hello World application uses them. When you have a system.out.println statement, this is actually using an output stream to print out the text. They are also used for other things like reading and writing files in a program, taking user inputs from the console, and communicating through sockets. Streams represent a flow of data and a bit like real streams of water, they can only go in one direction. Output streams write out data and input streams read in data. If you wanted to have data going two ways, you would need two separate streams. There are two core abstract classes in Java Streams API, InputStream and OutputStream. As these are abstract classes, you can't instantiate them, but they each have several concrete implementations for handling different types of data. For example, concrete implementations of InputStream include FileInputStream for reading files and ByteArrayInputStream for reading bytes and so on. Similarly, implementations of OutputStream include FileOutputStream and ByteArrayOutputStream for writing out files and byte arrays respectively and so on. There are two more abstract classes called Reader and Writer. These are similar to InputStream and OutputStream and they are built on the same concepts, but the main difference is that InputStream and OutputStream move bytes around whereas Reader and Writer move characters. Characters are easier and more intuitive to work with than bytes. They also handle Unicode characters and other character encoding issues, which byte streams do not. Again, these are abstract classes so it's the concrete implementations that are used depending on the type of data you are handling.