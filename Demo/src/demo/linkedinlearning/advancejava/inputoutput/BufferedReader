Reading files with BufferedReader
Selecting transcript lines in this section will navigate to timestamp in the video
- A common type of input that needs to be read into a program is file inputs. In this example, I have a text file called 'Example', which contains several lines of text. I want to be able to print out the file, line by line, in my program. One of the ways to do this is with a buffered reader. Buffered readers allow you to read lines of characters, and will work with multiple input encodings. So you can use them to read files in languages from all over the world. So, in my main method, the first thing I need to do is gut the file. So I will create a new file variable, and call it my file, and I will assign it to a new file variable. Parsing in the name of the file, which is 'Example.txt'. I also have to make sure I have the inport statements for the file. The file is the same folder as my NetBeans project, so I don't need to include any information about the path. Next, I need to create a buffered reader variable, which I will call 'reader', and I will assign it to a new buffered reader object. I now need to parse in a file reader object, which will be able to read my file. It is common to nest constructors when using readers like this. So I will create a new file reader inside the constructor for buffered reader, and I will parse in the file I created, myFile. NetBeans has underlined file reader in red and when I hover over it, it tells me that there is an unreported exception called file not found exception, so I will surround my codes with a try catch statement. I will actually catch an i/o exception instead of a file not found exception. File not found exception actually extends i/o exception, and in the code I'm going to write, there might be other kinds of i/o exceptions thrown. So if I use i/o exception, it will patch all of them. Now I want to print out each line in the file. So first, I create a string variable called 'Line'. Then, I will have a while loop. Inside the while loop, I will assign line to the next line in the file by doing line equals reader dot read line, and I will check that the result is not null. Then inside the while loop, I simply need to print out the line variable on a new line each time. When I run this, I get each line of the text file, printed out line by line. If I maximize the outputs, you can see the full text. I could have done something similar to this using the scanner glass, and the code would be slightly simpler and shorter. But scanners work slightly differently, in that they treat each section as a token. Buffered reader just returns a continuous stream. An advantage of buffered reader is that it is synchronized, which means it can safely be used in a multi-threaded application. It is also faster than a scanner. So if you're reading in long sections of text, it is often the better option.